<%# TODO: Break helpers up into extensions -%>
<%- includeFile("helpers.swift") -%>
<%- includeFile("Extensions/Annotations+Extension.swift") -%>
<%- includeFile("Extensions/Annotated+Extension.swift") -%>
<%- includeFile("Extensions/Method+Extension.swift") -%>
<%- includeFile("Extensions/Protocol+Extension.swift") -%>
<%- includeFile("Extensions/String+Extension.swift") -%>
<%- includeFile("Extensions/TypeName+Extension.swift") -%>
<%- includeFile("Extensions/Variable+Extension.swift") -%>
<%- includeFile("AutoStubbable.swift") -%>

<%= AutoStubbable.generate(types: types, annotations: argument) -%>
<%# Get stubbable types (structs and classes) and sort them by name -%>
<% let allTypes = types.structs + types.classes -%>
<% for type in allTypes.sorted(by: { $0.name < $1.name }) where type.isAutoStubbable { %>
<%# Generate stub method in extenion at similar accessLevel -%>
<%= type.accessLevel %> extension <%= type.name %> {
    <%_ for (index, method) in type.initMethods.enumerated() { %>
    <%_ let implicitlyUnwrappedVariables = type.storedVariables.filter { $0.isImplicitlyUnwrappedOptional } -%>
    static func <%= stubMethodName(index: index, count: type.initMethods.count) %>(
        <%_ for parameter in method.parameters { -%>
        <%= parameter.name %>: <%= parameter.typeName.generateStubbableName(type: parameter.type) %> = <%= parameter.typeName.generateDefaultValue(type: parameter.type, includeComplexType: true) %><% if parameter != method.parameters.last || !implicitlyUnwrappedVariables.isEmpty { %>,<% } %>
        <%_ } -%>
        <%_ for variable in implicitlyUnwrappedVariables { -%>
        <%= variable.name %>: <%= variable.typeName.generateStubbableName(type: variable.type) %> = <%= variable.typeName.generateDefaultValue(type: variable.type, includeComplexType: true) %><% if variable != implicitlyUnwrappedVariables.last { %>,<% } %>
        <%_ } -%>
    ) -> <%= type.name %><% if method.isFailableInitializer { %>?<% } %> {
        <%= generateStubbableInit(objectType: type, parameterNames: method.parameters.map { $0.name }) %>
    }
    <%_ } -%>
    <%_ if type.initMethods.isEmpty { -%>
    <%_ let availableVariables = type.storedVariables.filter { !$0.hasDefaultValue } -%>
    static func <%= stubMethodName(index: 0, count: 1) %>(
        <%_ for variable in availableVariables { -%>
        <%= variable.name %>: <%= variable.typeName.generateStubbableName(type: variable.type) %> = <%= variable.typeName.generateDefaultValue(type: variable.type, includeComplexType: true) %><% if variable != availableVariables.last { %>,<% } %>
        <%_ } -%>
    ) -> <%= type.name %> {
        <%= generateStubbableInit(objectType: type, variables: type.storedVariables) %>
    }
    <%_ } -%>
}
<% } -%>
